#standard
import glob
import platform

Import('env_base')
env_sqlite = env_base.Clone()

#compile as multithreaded http://www.sqlite.org/compile.html#threadsafe
#Setting =2 doesn't serialize all access, but requires locking such that
#no two threads use the same DB connection at the same time.
env_sqlite['CPPDEFINES'].append('SQLITE_THREADSAFE=2')

#enable full text search
#env_sqlite['CPPDEFINES'].append('SQLITE_ENABLE_FTS3')
#env_sqlite['CPPDEFINES'].append('SQLITE_ENABLE_FTS3_PARENTHESIS')

#remove libdl dependency by disabling dynamic module loading (not used anyways)
env_sqlite['CPPDEFINES'].append('SQLITE_OMIT_LOAD_EXTENSION');

#raise blob size limit to the maximum
env_sqlite['CPPDEFINES'].append('SQLITE_MAX_LENGTH=2147483647');

#enable up-arrow for previous commands (readline support)
if platform.system() != 'Windows':
	env_sqlite['LIBS'].append('readline');
	env_sqlite['CPPDEFINES'].append('HAVE_READLINE=1');

env_sqlite['CPPPATH'].append('#'+Dir('.').path);
env_sqlite.StaticLibrary('#lib/sqlite3', glob.glob('*.c*'))
env_sqlite.Program('#bin/sqlite3', 'shell.c')

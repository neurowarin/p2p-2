#site_scons
import boost
import gtkmm
import system

#std
import sys

#gui only
src_gui = [
	'gui.cpp',
	'gui_about.cpp',
	'gui_statusbar_main.cpp',
	'gui_vbox_search.cpp',
	'gui_window_download.cpp',
	'gui_window_download_status.cpp',
	'gui_window_preferences.cpp',
	'gui_window_upload.cpp',
	'main_gui.cpp'
]

#nogui only
src_nogui = [
	'main_nogui.cpp'
]

#command to all
src_common = [
	'CLI_args.cpp',
	'client_server_bridge.cpp',
	'CMWC4096.cpp',
	'database_connection.cpp',
	'database_init.cpp',
	'database_table_blacklist.cpp',
	'database_table_download.cpp',
	'database_table_hash.cpp',
	'database_table_preferences.cpp',
	'database_table_prime.cpp',
	'database_table_search.cpp',
	'database_table_share.cpp',
	'encryption.cpp',
	'hash_tree.cpp',
	'number_generator.cpp',
	'rate_limit.cpp',
	'request_generator.cpp',
	'sha.cpp',
	'speed_calculator.cpp',
	'thread_pool.cpp'
]

#client only
src_client = [
	'client_buffer.cpp',
	'client.cpp',
	'client_new_connection.cpp',
	'download.cpp',
	'download_factory.cpp',
	'download_file.cpp',
	'download_hash_tree.cpp',
]

#server only
src_server = [
	'http.cpp',
	'server_buffer.cpp',
	'server.cpp',
	'server_index.cpp',
	'slot.cpp',
	'slot_file.cpp',
	'slot_hash_tree.cpp',
]

#base (needed by all)
env = Environment()
system.env_setup(env)
boost.env_setup(env)

#nogui
env_nogui = env.Clone()

#nogui_static
env_nogui_static = env.Clone()
system.env_setup_static(env_nogui_static)

#gui
env_gui = env.Clone()
gtkmm.env_setup(env_gui)

#exported environments for sub scons files
Export('env')

#sub scons files
SConscript([
	'dep_graph/SConstruct',
	'libsqlite3/SConstruct',
	'libtommath/SConstruct',
	'overlay_sim/SConstruct',
	'site_scons/SConstruct',
	'test_manager/SConstruct',
	'unit_tests/SConstruct'
])

static_libs = [
	boost.static_lib('date_time'),
	boost.static_lib('filesystem'),
	boost.static_lib('system'),
	boost.static_lib('thread')
]

print 'building with',env.GetOption('num_jobs'),'threads'

#compile different object groups
common_obj = env.Object(src_common)
gui_obj = env_gui.Object(src_gui)
nogui_obj = env.Object(src_nogui)
client_obj = env.Object(src_client)
server_obj = env.Object(src_server)

#link
env_gui.Program('p2p_gui', gui_obj + common_obj + client_obj + server_obj + static_libs)
env_nogui.Program('p2p_nogui', nogui_obj + common_obj + server_obj + static_libs)
if sys.platform == 'linux2':
	env_nogui_static.Program('p2p_nogui_static', nogui_obj + common_obj + server_obj + static_libs)

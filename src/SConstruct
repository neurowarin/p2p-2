import fnmatch
import sys
import os

#source files for objects to be linked in to p2p_gui
src_gui = [
	'gui.cc',
	'gui_about.cc',
	'gui_download_status.cc',
	'gui_preferences.cc',
	'main_gui.cc'
]

#source files for objects to be linked in to p2p_nogui
src_nogui = [
	'main_nogui.cc'
]

#source files for objects to be linked in to p2p_gui and p2p_nogui
src_common = [
	'CLI_args.cc',
	'client_buffer.cc',
	'client.cc',
	'client_new_connection.cc',
	'client_server_bridge.cc',
	'CMWC4096.cc',
	'DB_blacklist.cc',
	'DB_client_preferences.cc',
	'DB_download.cc',
	'DB_prime.cc',
	'DB_search.cc',
	'DB_server_preferences.cc',
	'DB_share.cc',
	'download.cc',
	'download_factory.cc',
	'download_file.cc',
	'download_hash_tree.cc',
	'download_tracker.cc',
	'encryption.cc',
	'hash_tree.cc',
	'logger.cc',
	'number_generator.cc',
	'request_generator.cc',
	'server_buffer.cc',
	'server.cc',
	'server_index.cc',
	'sha.cc',
	'speed_calculator.cc',
	'thread_pool.cc'
]

##BEGIN FUNCTIONS
#search files in list of directories, return path to static library
def lib_path(LIBDIR, pattern):
	#set up suffix to append to pattern
	if sys.platform == 'win32':
		pattern += '.lib'
	if sys.platform == 'linux2':
		pattern += '.a'

	#search directories for file name matching pattern
	for dir in LIBDIR:
		if dir[0] != '#': #don't search directories within source tree
			for file in os.listdir(dir):
				if fnmatch.fnmatch(file, pattern):
					return dir + "/" + file

	print 'error: cannot find library with pattern "' + pattern
	exit(1)
##END FUNCTIONS

#sub-SConscripts to run
SConscript([
	'#dep_graph/SConstruct',
	'#libsqlite3/SConstruct',
	'#libtommath/SConstruct',
	'#overlay_sim/SConstruct',
	'#test_manager/SConstruct'
])

#setup base environment (what is common to both linux and windows)
env_base = Environment(
	CPPPATH = ['.', '#/libtommath', '#/libsqlite3'],
	LIBS = ['libtommath', 'libsqlite3']
)

#where to look for libraries
LIBDIR = ['#libtommath', '#libsqlite3']

#setup platform specific environment options
if sys.platform == 'win32':
	LIBDIR.append('/Program Files/Microsoft SDKs/Windows/v6.0A/Lib')
	LIBDIR.append('/Program Files/boost/boost_1_36_0/lib')
	LIBDIR.append('/gtkmm/lib')
	env_base['CPPPATH'].append('/Program Files/Microsoft SDKs/Windows/v6.0A/Include')
	env_base['CPPPATH'].append('/Program Files/boost/boost_1_36_0')
	env_base['CCFLAGS'].append('/EHsc') #exception support
	env_base['CCFLAGS'].append('/w')    #disable all warnings
	env_base['CCFLAGS'].append('/Ox')   #max optimizations
	env_base['LIBS'].append('ws2_32')   #winsock lib
	env_base['LIBS'].append('advapi32') #random number gen lib
if sys.platform == 'linux2':
	LIBDIR.append('/usr/local/lib')
	env_base['CPPPATH'].append('/usr/local/include/boost-1_36')
	env_base['CCFLAGS'].append('-O3')   #max optimizations
	env_base['LIBS'].append('dl')       #needed for sqlite3
	env_base['LIBS'].append('pthread')  #needed for sqlite3

static_libs = [
		lib_path(LIBDIR, 'libboost_filesystem*'),
		lib_path(LIBDIR, 'libboost_system*'),
		lib_path(LIBDIR, 'libboost_thread*')
]

#create gui environment
env_gui = env_base.Clone()
env_gui.ParseConfig('pkg-config gtkmm-2.4 --cflags --libs')

#compile different object groups
src_gui_obj = env_gui.Object(src_gui)
src_nogui_obj = env_base.Object(src_nogui)
src_common_obj = env_base.Object(src_common)

#link
env_gui.Program(
	'p2p_gui',
	src_gui_obj + src_common_obj + static_libs,
	LIBPATH = LIBDIR
)

env_base.Program(
	'p2p_nogui',
	src_nogui_obj + src_common_obj + static_libs,
	LIBPATH = LIBDIR
)

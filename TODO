TODO

-Add rerequest feature.

-Add a stop function to the server to stop the server thread. Make it so servers
can be properly created and destroyed.

-Add a client_buffer feature to allow download to check for errors.


BUGS


DEFERRED FEATURES

-Needs to be a check so that when the user tries to download the same thing
twice the second download doesn't get appended to the first. Make a database
to store downloaded file information to check against.


IDEAS

-File location should be done with trackers which are organized in to a tree
structure such that if the user adds a tracker the user will also get to see
the files of the trackers that tracker trusts and the files that that tracker
trusts etc. Have an option to limit trust levels to direct trust only, one
level inheritance and all level inheritance.

-Implement pipelining. The idea is that you request a big group of file blocks
from a server and then request new blocks as blocks start to come in. This gets
rid of the dead time on the line that exists from the time after you receive a
block to the time the server gets a request for a new block. I think this can be
done having a queue, first request first response. Whenever a request is made
put a pointer to the download in the queue.

-Give the client_buffer the ability to encapsulate requests in to one packet.
Have a command which is used for multipackets that is variable packet length.
This would help for pipelining because you could combine many request packets
in to one.


PORTABILITY PROBLEMS

-Paths have forward slashes in them in globals.h, read boost::filesystem docs
and fix this you lazy slog.

-Casting BS.to_ulong() to a char in conversion.h is not portable between
architectures of different endianness.


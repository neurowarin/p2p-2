TODO

-Make a static member function in the client_buffer and move the download buffer
to it as a singleton std::set. When downloads are added to any client_buffer
have the client_buffer add them to the set (or try and fail if it already exists).

-Make a non-virtual lock function in the download ABC. Correction, have a member
variable mutex because boost 1.33 doesn't support a normal lock and unlock. Use
a scoped lock in the client_buffer that uses this mutex. Actually, how would it
be possible to lock the container when a removal is happening?

-Rename download_prep to download_factory since it is close to that design
pattern.


IDEAS

-File location should be done with trackers which are organized in to a tree
structure such that if the user adds a tracker the user will also get to see
the files of the trackers that tracker trusts and the files that that tracker
trusts etc. Have an option to limit trust levels to direct trust only, one
level inheritance and all level inheritance.

-Don't allow people to download who have the P2P port blocked. Make a ping
command the server can send to the client. The client should return a pong
otherwise it doesn't get to download.

-Let the user set up bandwidth profiles that can be quickly selected. The user
could create one for games/night time/bla bla. Then have a timer that can select
the profile based on time of day.

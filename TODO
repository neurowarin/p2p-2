TODO

-Break the rerequest logic in to it's own class. Then get the hash tree download
working using this class.

-Make pipeline size based on max response data expected instead of a set number
of commands.


DEFERRED FEATURES

-Needs to be a check so that when the user tries to download the same thing
twice the second download doesn't get appended to the first. This will naturally
be added when hashes are checked. If a file we want to download has a root hash
that exists in the hashes folder then the file was already downloaded.

-The download needs to remove a file from the DB when it receives a P_FNF. It
needs to delay a request when a P_DNE is received.

-Blacklisting of abusive clients/servers.

-Rerequest algorithm doesn't tollerate changes in # of servers connected.


IDEAS

-File location should be done with trackers which are organized in to a tree
structure such that if the user adds a tracker the user will also get to see
the files of the trackers that tracker trusts and the files that that tracker
trusts etc. Have an option to limit trust levels to direct trust only, one
level inheritance and all level inheritance.

-Don't allow people to download who have the P2P port blocked. Make a ping
command the server can send to the client. The client should return a pong
otherwise it doesn't get to download.

-Download priority can be done by adding a "stickyness" to downloads in the
client_buffer. Have a value associated with downloads which makes them take
more calls to rotate_downloads() to actually rotate. Downloads should start on
normal. Possible settings low = 1, normal = 2, medium = 3, and high = 4.

BUGS AND NECESSARY FEATURES

-The implementation of multi-downloading isn't done. It needs new logic in
client::terminateDownload() to get rid of downloads but not disconnect sockets
still in use. clientIndex::initialFillBuffer() is also not working.

-Make client::infoBuffer store IP's in a vector to leave it more up to the gui
to determine how they're displayed.

-Program crashes if trying to resume download where the user has removed the partial
file.

-There is no check for a download already completed by the download feature.

-If the download directory is missing and a download is started the directory
is not created automatically.

-There should be a check for the delimiter in the index files.
Filenames can have a delimiter in them and mess things up.

-Client has no control of how many connections it will try to make.


POSSIBLE FEATURES

-client::addBlock() has string copying in it, could be a performance problem.

-Possibly add a check to make sure the block requested is the block the server
sends.

-Add a check to make sure the client is not requesting the same blocks over
and over(trying to waste bandwidth to degrate serving capability).

-Have the serverIndex poll to check for new files added to share.

-Come up with a indexing scheme for search.db(it'll get big).

-Reduce control data size by encoding file and fileBlock numbers. Also, perhaps
negotiate control data size for each download.

-Information in the gui statusbar for protocol overhead.


IDEAS

-Have the destructor for download.cc delete it's server elements. Delete the
download instance in client::terminateDownload(). Get terminateDownload working
such that it doesn't disconnect sockets that are still being used by other
downloads. Also, terminateDownload would need to clean up serverHolder.

-Overhead can be reduced a lot. The client doesn't need to know what file_ID
the server is sending because it tracks everything by the socket number. The
client also doesn't need to know the fileBlock because it can expect the server
to send the block that was requested. For that matter what the server is doing
"BLS" also doesn't need to be known.

-Locating files should be done on a tiered linear network. Hosts should connect to
eachother in a sequential way on level 1 but in other ways on the other levels to
make it so the client can start traversing the network on the level which is closest.

Tier 1: Linear
Tier 2: Random

Question: How would tier 1 remain connected at all times?
Question: How to insure roughly the same access time to any node?


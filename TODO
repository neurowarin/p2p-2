BUGS

Server is pausing due to the time it takes startDownloads_deferred to release
it's hold on scheduledDownloadsMutex.


NEEDED FEATURES

-Needs to be a check so that when the user tries to download the same thing
twice the second download doesn't get appended to the first. Make a database
to store downloaded file information to check against.

-Something to account for the burst of rerequests at the end of a file.

-There probably needs to be a distinction made between completed and stopped
downloads. Like what happens with the partial file from a stopped download?

-Algorithm to make download speed more smooth. Perhaps something which will give
the number the direction of the actual speed but only allow it to travel in that
direction at a certain rate. Perhaps how much it could travel in each time step
could be calculated in such a way that when it's close it can't travel very
fast but when it's far away it can travel faster.

-Have the serverIndex poll to check for new files added to share.

-Client control of how many outgoing connections it will try to make.

-Need a server timeout for servers that accept requests but never respond and
never disconnect. A person could exploit this by taking up slots but no bandwidth.


PERFORMANCE OBSERVANCES

-With multiple downloads transfer speed also decreases. I suspect it's because
the servers have to seek to different files often. Could a buffer solve this?
How would that be implemented?

-Instead of new'ing superBlocks consider respecializing them to different blocks.


IDEAS

-File location should be done with trackers which are organized in to a tree
structure such that if the user adds a tracker the user will also get to see
the files of the trackers that tracker trusts and the files that that tracker
trusts etc. Have an option to limit trust levels to direct trust only, one
level inheritance and all level inheritance.

-The protocol for sending information for a file should be 1 byte command, 2 byte
packet length, the rest of the packet will be variable length.


TODO

-Combine hash tree's in to one file. Keep track of starting locations in DB.
Perhaps have a memmove type opteration one a file where hashes can be moved to
get rid of gaps due to removed files. The intermediate step of the memmove
operation would basically be a journal. Develope this in parallel with existing
system.


THINK ABOUT

-Think about CMWC4096 PRNG seed issue.

-Think about how ISP might detect protocol via knowing handshake size/port.


DEFERRED FEATURES

-When connecting to a server have the client send it's host key and then the
server send it's host key. Both the client and server should look to see if a
key has been negotiated with the other before. If it has the client can just
start sending without negotating a new key. Defer this feature until GUIDs
are worked out.

-client::set_download_directory() not doing anything but saving setting.

-Support for multiple share directories.

-Total upload/download needs to be kept track of in client_server_bridge. Think
about having a minimum speed on the client/server upload/download (like 1kB/s).
If there's no minimum it could be possible for the client to starve the server
or vise versa. The sleep method in the socket checking loop won't work here
because it would allow writes to slow down reads and visa versa.

-Figure out how to handle naming conflicts. It should be fully automatic.
Probably just rename the files according to some rules. It doesn't matter too
much since the hashes stay the same.

-Have a directory where partially downloaded files reside. When a file finishes
downloading it can be moved to a directory which can be indexed normally. This
way users can rename files and do what they want and files will just get
rehashed without complication.


IDEAS

-Have a tab that shows share stats, upload/download stats, duplicate files, etc.

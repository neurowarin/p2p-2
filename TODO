TODO

-Downloads show 0B when reading 0 bytes per second. It should be 0 B/s.

-Download specific speed doesn't have good enough resolution.

-Look in to what unit tests can be added. Definetlely do one for contiguous.

-When hash tree download cancelled the download_file file doesn't get removed.

-Free up file slot after P_ERROR is sent in server_buffer.

-Need a check to make sure client not requesting same slot for same file
multiple times.

-Rename contiguous to contiguous_map, and create a contiguous_set.

-Need better signaling on when share_index should start indexing.

-Share index should not run while resumed downloads are hash checking.


THINK ABOUT

-Think about CMWC4096 PRNG seed issue.

-Think about detecting protocol via knowing handshake size/port.


DEFERRED FEATURES

-When connecting to a server have the client send it's host key and then the
server send it's host key. Both the client and server should look to see if a
key has been negotiated with the other before. If it has the client can just
start sending without negotating a new key. Defer this feature until GUIDs
are worked out.

-client::set_download_directory() not doing anything but saving setting.

-Support for multiple share directories.

-Total upload/download needs to be kept track of in client_server_bridge. Think
about having a minimum speed on the client/server upload/download (like 1kB/s).
If there's no minimum it could be possible for the client to starve the server
or vise versa. The sleep method in the socket checking loop won't work here
because it would allow writes to slow down reads and visa versa.

-Figure out how to handle naming conflicts. It should be fully automatic.
Probably just rename the files according to some rules. It doesn't matter too
much since the hashes stay the same.

-Combine hash tree's in to one file. Keep track of starting locations in DB.
Perhaps have a memmove type opteration one a file where hashes can be moved to
get rid of gaps due to removed files. The intermediate step of the memmove
operation would basically be a journal.

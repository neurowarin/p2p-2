BUGS AND NECESSARY FEATURES

-server::queueRequest() has a send in it that doesn't loop until complete

-Does not yet allow for downloading multiple files at the same time.

-Make client::infoBuffer store IP's in a vector. Correctly download IP display
in the gui.

-Program crashes if trying to resume download where the user has removed the partial
file.

-There is no check for a download already completed by the download feature.

-If the download directory is missing and a download is started the directory
is not created and the RAM starts getting sucked up because nothing is getting
written to disk.

-There should be a check for the delimiter in the index files.
Filenames can have a delimiter in them and mess things up.

-Client has no control of how many connections it will try to make.

POSSIBLE FEATURES

-Possibly add a check to make sure the block requested is the block the server
sends.

-Add a check to make sure the client is not requesting the same blocks over
and over(trying to waste bandwidth to degrate serving capability).

-Have the serverIndex poll to check for new files added to share.

-Come up with a indexing scheme for search.db(it'll get big).

-Reduce control data size by encoding file and fileBlock numbers. Also, perhaps
negotiate control data size for each download.

-Information in the gui statusbar for protocol overhead.


IDEAS

-Link the server elements together in a ring. Have a token that each can pass 
to the next to signify that it's their turn to request a block from the socket.
Only the serverElements that have the same socket needs to be linked. hasSocket()
will need to be modified to where it only returns true if the element containing
the socket currently has the token. Might need to give the serverElement some
brains, give it some functions instead of just using it as a dumb container.

-Overhead can be reduced a lot. The client doesn't need to know what file_ID
the server is sending because it tracks everything by the socket number. The
client also doesn't need to know the fileBlock because it can expect the server
to send the block that was requested. For that matter what the server is doing
"BLS" also doesn't need to be known.

-Locating files should be done on a tiered linear network. Hosts should connect to
eachother in a sequential way on level 1 but in other ways on the other levels to
make it so the client can start traversing the network on the level which is closest.

Tier 1: Linear
Tier 2: Random

Question: How would tier 1 remain connected at all times?
Question: How to insure roughly the same access time to any node?


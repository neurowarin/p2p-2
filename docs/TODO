TODO

-create asynchronous buffered pipeline in share_index. Model each state as a
class with an internal running thread.

share_pipeline_0_scan should have ctor that takes share_pipeline_1_hash reference
share_pipeline_2_write should have ctor that takes share_pipeline_1_hash reference

-moving finished downloads from the download table to the share table is a pain,
is the download table even necessary? Why not have a bit in the share table to
indicate whether the file is downloading or not.

-make request generator unit test

-requests should be sent before file blocks, when two hosts download from
eachother the file blocks hog upload that should be used to get requests out.


THINK ABOUT

-Using new primes must be forced. To do this old primes must be kept track of.

DEFERRED FEATURES

-SQLite blob write offset is a signed int. This limits the maximum tree size
to 2gB. Create document like this: http://www.sqlite.org/limits.html with size
limits.
-Support for multiple share directories.
-Figure out how to handle naming conflicts. It should be fully automatic.
Probably just rename the files according to some rules. It doesn't matter too
much since the hashes stay the same.
-Have a tab that shows share stats, upload/download stats, duplicate files, etc.
-Make sure program works when out of hard drive space.

Basic Info
==========

The protocol is symmetric with the exception of the key exchange. Any message
can go in either direction. All numbers are encoded in big-endian. The protocol
is entirely binary.

VLI (variable length integers) are used to save space. VLIs are used when we
know the maximum value an integer must hold. VLIs make the protocol difficult
to implement with middleware, however they do save substantial space.

The protocol is designed to minimize the amount of data that must arrive from
a trusted source. Only the root hash must be known to download a file. The root
hash is the hash of the file size (8 byte big-endian) followed by the root hash
(20 byte SHA1 hash).


Key Exchange
============

Each TCP session starts with a Diffie-Hellman key exchange.

host_A initiates a connection with host_B.
g   = the generator both sides use that is always equal to 2
sA  = secret exponent of host_A
sB  = secret exponent of host_B
p   = prime host_A generates that both sides use
rA  = result of host_A, g^sA % p
rB  = result of host_B, g^sB % p
k   = secret key
MiM = Man in the middle.
^   = exponentiation symbol
%   = modulo symbol

The section header indicates who sees what.
	+-----------------+   +-----------------+   +-----------------+
	|     host_A      |   |       MiM       |   |      host_B     |
	+-----------------+   +-----------------+   +-----------------+
	| k = rB^sA % p   | = | g^(sA*sB) % p   | = | r_A^sB % p = k  |
	+-----------------+   +-----------------+   +-----------------+

host_A steps
------------
step 0: Send p and rA.
	+---+---+---+---+---+---+---+---+
	|       p       |       rA      |
	+---+---+---+---+---+---+---+---+
	  0    ...   15  16    ...   31
step 1: Receive rB. Calculate shared secret.

host_B steps
------------
step 0: Receive p and rA. Calculate shared secret.
step 2: Send rB.
	+---+---+---+---+
	|       rB      |
	+---+---+---+---+
	  0    ...   15

The shared secret is used to seed two RC4-drop768 PRNGs. One PRNG is for sending
and one is for receiving. RC4 and key exchanges without PKI (public key
infrastructure) are not secure. However, the point of this is obfuscation, not
security.

After the PRNG is seeded all bytes sent and received are XOR'd against the
output of the PRNGs. The send PRNG of Host_A remains synchronized to the recv
PRNG of Host_B and vise versa.


Initial Message
================

After key exchange this message is sent by both sides.
	+---+---+---+---+---+
	|     A     |   B   |
	+---+---+---+---+---+
	  0  ... 20  21  22
A = node_ID, B = port
note: A is the node_ID for the DHT.
note: B is the port the remote host will accept TCP/UDP connections on.

Messages
========

Slot commands are used to exchange hash tree blocks and file blocks.

---
name: error
desc: Meaning depends on what the error is sent in response to.
	+---+
	| A |
	+---+
	  0
A = command (base10: 0)
---

---
name: request_slot
desc: Request a slot for downloading.
	+---+---+---+---+
	| A |     B     |
	+---+---+---+---+
	  0   1  ...  20
A = command (base10: 1), B = hash

expected response: slot or error
note: If error response the slot is not opened.
note: The maximum number of slots that can be opened is 256.
---

---
name: slot
desc: Sent in response to request_slot. This message contains the
information needed to downloads hash tree blocks and file blocks.
	+---+---+---+---+---+---+---+---+---+   +---+---+---+   +---+---+---+
	| A | B | C |     D     |     E     | + |     F     | + |     G     |
	+---+---+---+---+---+---+---+---+---+   +---+---+---+   +---+---+---+
	  0   1   2   3  ...  10  11 ...  30      31 ...  x      x+1 ...  y
A = command (base10: 2), B = slot number, C = status, D = file size,
E = root hash, F = optional hash tree bit field, G = optional file bit field

note: The file size and root hash should be hash checked when received.

possible status bytes:

base10: 0
description: Hash tree complete, file complete.

base10: 1
description: Hash tree complete, file incomplete. File bit field appended.
Expect have_file_block messages.

base10: 2
description: Hash tree incomplete, file complete. Expect have_hash_tree_block
messages.

base10: 3
description: Hash tree incomplete, file incomplete. File bit field appended and
hash tree bit field appended after that. Expect have_hash_tree_block and
have_file_block messages.
---

---
name: request_hash_tree_block
desc: Request a block from a hash tree.
	+---+---+---+---+---+
	| A | B |     C     |
	+---+---+---+---+---+
	  0   1   2  ...  n
A = command (base10: 3), B = slot number, C = block number (VLI)

expected response: block or error
note: B is sized such that it can hold the maximum tree block number.
note: If error response the slot is closed.
note: It violates the protocol to request a block the peer doesn't have.
---

---
name: request_file_block
desc: Request a block from a file.
	+---+---+---+---+---+
	| A | B |     C     |
	+---+---+---+---+---+
	  0   1   2  ...  n
A = command (base10: 4), B = slot number, C = block number (VLI)

expected response: block or error
note: B is sized such that it can hold the maximum file block number.
note: If error response the slot is closed.
---

---
name: block
desc: Either a hash tree block or file block.
	+---+---+---+---+
	| A |     B     |
	+---+---+---+---+
	  0   1  ... 10240
A = command (base10: 5), B = block (maximum size of 10240)

note: It is a violation of the protocol to send a bad block. All blocks should
be checked before they're sent. The file may have been modified.
---


Have Message Recommendations
----------------------------

Have messages should not be sent to the host which sent the block.

Also, they should not be sent to hosts we know won't request the block. We can
know that a host which already has the block will not request the block. This
can only be known if two hosts are downloading from eachother.

---
name: have_hash_tree_block
desc: Sent to tell a peer that we have a new hash tree block.
	+---+---+---+---+---+
	| A | B |     C     |
	+---+---+---+---+---+
	  0   1   2  ...  n
A = command (base10: 6), B = slot number, C = block number (VLI)

note: C is sized such that it can hold the maximum hash tree block number.
---

---
name: have_file_block
desc: Sent to tell a peer that we have a new file block.
	+---+---+---+---+---+
	| A | B |     C     |
	+---+---+---+---+---+
	  0   1   2  ...  n
A = command (base10: 7), B = slot number, C = block number (VLI)

note: C is sized such that it can hold the maximum file block number.
---

---
name: close_slot
desc: Closes a slot.
	+---+---+
	| A | B |
	+---+---+
	  0   1
A = command (base10: 8), B = slot number
---

---
name: peer_4
desc: Address of peer that has file.
	+---+---+---+---+---+---+---+
	| A | B |     C     |   D   |
	+---+---+---+---+---+---+---+
	  0   1   2  ...  5   6   7
A = command (base10: 9), B = slot number, C = IPv4 address, D = port
---

---
name: peer_6
desc: Address of peer that has file.
	+---+---+---+---+---+---+---+
	| A | B |     C     |   D   |
	+---+---+---+---+---+---+---+
	  0   1   2  ... 17  18  19
A = command (base10: 10), B = slot number, C = IPv6 address, D = port
---


Pipelining
==========

Pipelining is done by sending multiple requests, and a new request whenever a
response is received. This increases throughput because the sender will not be
idle waiting for a request.

A maximum of 8 (request_hash_tree_block + request_file_block) commands can be
pipelined.


Hash Tree
=========

Merkle Hash Trees are used to distribute downloading of hash data needed to
verify the integrity of file blocks. The hash function used to generate the
tree is SHA1.

The bottom row of the tree consists of hashes for every 10240 bytes of the file
(the last block may be shorter). Every row above the bottom row consists of
hashes for blocks of 512 hashes (may be less if there isn't 512 hashes left in
the child row).

The hash on the top of the tree is the root hash. The file size (8 byte
big-endian) with the root hash appended are then hashed together to get the hash
the file is tracked by.

The hash blocks sent in the block message is at most a 512 hash sized contiguous
block that doesn't span multiple rows (so it may be shorter).


Limits
======

The maximum file size is 2^64 bytes.

Hash trees are currently stored in SQLite. SQLite blobs are limited to
2^31 - 1 bytes. Files which would generate hash trees larger than this won't be
hashed until this limitation can be addressed.

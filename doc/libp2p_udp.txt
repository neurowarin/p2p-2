Basic Info
==========
The DHT used is based on Kademlia.

The DHT commands are sent to the same port as the TCP listener. All messages are
kept <= 508 bytes to insure no message gets truncated.

We assume a message has been lost if we don't receive a reply within 60 seconds.

All request messages include 4 random bytes which must be echo'd back in the
response. This is to protect against address forgery. The Kademlia spec calls
for 20 bytes but that is excessive.


Concurrency
===========
In the kademlia paper the number of concurrent requests on the wire is referred
to as alpha. The alpha is unspecified.


Routing Table Updates
=====================
A host should only be added to the routing table when we receive a response
message. This is to make Sybil attacks more difficult.

Timeouts should only be reset on hosts in the routing table when we receive any
response from them.

Timeouts should NOT be reset when we receive a non-response from a host. If this
were allowed then anyone could keep a dead entry alive.


Store DOS
=========
To stop anyone from being able to Sybil and DOS using the store_* commands it is
required that the store_* commands contain random bytes received by a pong
message that are no more than 8 minutes old. This provides a very minimal
assurance that the sender address of the store_* command has not been forged.

All nodes must maintain mappings between the random bytes (sent in pong
messages) and the IP/port they were sent to.


Messages
========

---
name: ping
desc: Check if a host is up and/or get node ID.
	+---+---+---+---+---+---+---+
	| A |     B     |     C     |
	+---+---+---+---+---+---+---+
	  0   1  ...  4   5  ... 24
A = command (base10: 0), B = random bytes (store_token),
C = node ID of sender
          
expected response: pong
---

---
name: pong
desc: Sent in response to ping.
	+---+---+---+---+---+---+---+
	| A |     B     |     C     |
	+---+---+---+---+---+---+---+
	  0   1  ...  4   5  ... 24
A = command (base10: 1), B = echo of random bytes, C = node ID of sender

note: The node ID should be used to update routing tables. When we send random
bytes in a ping message it acts as permission for the remote host to potentially
update our routing table (by sending us a pong).
---

---
name: find_node
desc: Request for closer nodes.
	+---+---+---+---+---+---+---+---+---+---+
	| A |     B     |     C     |     D     |
	+---+---+---+---+---+---+---+---+---+---+
	  0   1  ...  4   5  ... 24  25  ... 44
A = command (base10: 2), B = random bytes (store_token),
C = node ID of sender, D = ID to find

note: The endpoint this message is from should not be included in the host_list
response.

expected response: host_list
---

---
name: host_list
desc: A list of nodes which are closer.

	+---+---+---+---+---+---+---+---+---+   +---+---+---+
	| A |     B     |     C     |   D   | + |     E     |
	+---+---+---+---+---+---+---+---+---+   +---+---+---+
	  0   1  ...  4   5      24  25  26      27  ...  x
A = command (base10: 3), B = echo of random bytes, C = node ID of sender,
D = IP bit_field, E = address list

note: The D bit_field indicates whether the address in the E list is a IPv4
address or IPv6 address.
note: There can be a maximum of 8 IPv4 addresses and 8 IPv6 addresses.
note: The nodes are the closest to the ID_to_find that the sender knows of.

E list element:
	+---+---+---+---+---+
	|     A     |   B   |
	+---+---+---+---+---+
	  0  ...  x  x+1 x+2
A = address, B = port

note: If IPv4 then x=3. If IPv6 then x=15.
---

---
name: store_node
desc: Store a mapping from node ID to address.
	+---+---+---+---+---+---+---+
	| A |     B     |     C     |
	+---+---+---+---+---+---+---+
	  0   1  ...  4   5  ... 24
A = command (base10: 4), B = store_token, C = node ID of sender
---

---
name: store_file
desc: Store a mapping from node ID to file hash.
	+---+---+---+---+---+---+---+---+---+---+
	| A |     B     |     C     |     D     |
	+---+---+---+---+---+---+---+---+---+---+
	  0   1  ...  4   5  ... 24  25  ... 44
A = command (base10: 5), B = store_token, C = node ID of sender, D = file hash
---

---
name: query_file
desc: Request IDs of nodes that have the specified file.
	+---+---+---+---+---+---+---+---+---+---+
	| A |     B     |     C     |     D     |
	+---+---+---+---+---+---+---+---+---+---+
	  0   1  ...  4   5  ... 24  25  ... 44
A = command (base10: 6), B = random bytes, C = node ID of sender, D = file hash

expected response: node_list
---

---
name: node_list
desc: A list of node IDs.
	+---+---+---+---+---+---+---+   ---+---+---+
	| A |     B     |     C     | + |    D     |
	+---+---+---+---+---+---+---+   ---+---+---+
	  0   1  ...  4   5  ... 24      25  ...  y
A = command (base10: 7), B = echo of random bytes, C = node ID of sender,
D = node ID list

D list element:
	+---+---+---+
	|     A     |
	+---+---+---+
	  0  ...  19
A = node ID

note: The max size of the C list is 16 elements.
---

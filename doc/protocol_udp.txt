Basic Info
==========
The DHT used is based on Kademlia.

The DHT commands are sent to the same port as the TCP listener. All messages are
kept <= 508 bytes to insure no message gets truncated.

We assume a message has been lost if we don't receive a reply within 60 seconds.

All request messages include 4 random bytes which must be echo'd back in the
response. This is to protect against address forgery. The Kademlia spec calls
for 20 bytes but that is excessive.


Concurrency
===========
In the kademlia paper the number of concurrent requests on the wire is referred
to as alpha. The alpha is unspecified.


Routing Table Updates
=====================
A host should only be added to the routing table when we receive a pong message.
This is to make Sybil attacks more difficult.

Timeouts should only be reset on hosts in the routing table when we receive a
response from them.

Timeouts should NOT be reset when we receive a non-response from the host. If
this were allowed then anyone could keep a dead entry alive.


Store DOS
=========
To stop anyone from being able to Sybil and DOS using the store_* commands it is
required that the store_* commands contain random bytes received by a pong
message that are no more than 4 minutes old. This provides a very minimal
assurance that the sender address of the store_* command has not been forged.

All nodes must maintain mappings between the random bytes (sent in pong
messages) and the IP/port they were sent to.


Messages
========

---
name: ping
desc: Check if a host is up and/or get node ID.
	+---+---+---+---+---+---+---+
	| A |     B     |     C     |
	+---+---+---+---+---+---+---+
	  0   1  ...  4   5  ... 24
A = command (base10: 0), B = random bytes, C = node ID of sender
          
expected response: pong
---

---
name: pong
desc: Sent in response to ping.
	+---+---+---+---+---+---+---+
	| A |     B     |     C     |
	+---+---+---+---+---+---+---+
	  0   1  ...  4   5  ... 24
A = command (base10: 1), B = echo of random bytes, C = node ID of sender

note: The node ID should be used to update routing tables. When we send random
bytes in a ping message it acts as permission for the remote host to potentially
update our routing table (by sending us a pong).
---

---
name: find_node
desc: Request for closer nodes.
	+---+---+---+---+---+---+---+---+---+---+
	| A |     B     |     C     |     D     |
	+---+---+---+---+---+---+---+---+---+---+
	  0   1  ...  4   5  ... 24  25  ... 44
A = command (base10: 2), B = random bytes, C = node ID of sender, D = ID to find

expected response: host_list
---

---
name: host_list
desc: A list of nodes which are closer. This list will contain only one element
if the node is found.
	+---+---+---+---+---+---+---+---+   +---+---+---+   +---+---+---+
	| A |     B     |     C     | D | + |     E     | + |     F     |
	+---+---+---+---+---+---+---+---+   +---+---+---+   +---+---+---+
	  0   1  ...  4   5      24  25      26  ...  x      x+1 ...  y
A = command (base10: 4), B = echo of random bytes, C = node ID of sender,
D = IPv4 address count, E = IPv4 address list, F = IPv6 address list

note: The max size of the D+E list is 26 elements.
note: Only the IPv4 address count is included because the IPv6 address count can
be inferred.

A E list element:
	+---+---+---+---+---+---+
	|     A     |   B   | C |
	+---+---+---+---+---+---+
	  0  ...  3   4   5   6
A = IPv4 address, B = port, C = bucket number

A F list element:
	+---+---+---+---+---+---+
	|     A     |   B   | C |
	+---+---+---+---+---+---+
	  0  ... 15  16  17  18
A = IPv6 address, B = port, C = bucket number

note: C will equal 255 (base 10) if the node is an exact match.
---

---
name: query_file
desc: Request IDs of nodes that have the specified file.
	+---+---+---+---+---+---+---+---+---+---+
	| A |     B     |     C     |     D     |
	+---+---+---+---+---+---+---+---+---+---+
	  0   1  ...  4   5  ... 24  25  ... 44
A = command (base10: 5), B = random bytes, C = node ID of sender, D = file hash

expected response: node_list
---

---
name: node_list
desc: A list of node IDs.
	+---+---+---+---+---+---+---+
	| A |     B     |     C     |
	+---+---+---+---+---+---+---+
	  0   1  ...  4   9  ...  y
A = command (base10: 5), B = echo of random bytes, C = node ID list

A C list element:
	+---+---+---+
	|     A     |
	+---+---+---+
	  0  ...  19
A = node ID that has file

note: The max size of the C list is 25 elements.
---

---
name: store_file
desc: Store a mapping from node ID to file hash.
	+---+---+---+---+---+---+---+---+---+---+
	| A |     B     |     C     |     D     |
	+---+---+---+---+---+---+---+---+---+---+
	  0   1  ...  4   5  ... 24  25  ... 44
A = command (base10: 6), B = random bytes from a pong in the last 4 minutes,
C = node ID of sender, D = file hash

note: If B is needed a ping should be sent.
---

---
name: store_node
desc: Store a mapping from node ID to address.
	+---+---+---+---+---+---+---+---+---+---+
	| A |     B     |     C     |     D     |
	+---+---+---+---+---+---+---+---+---+---+
	  0   1  ...  4   5  ... 24  25  ...  x
A = command (base10: 7), B = random bytes from a pong in the last 4 minutes,
C = node ID of sender

note: If B is needed a ping should be sent.
---

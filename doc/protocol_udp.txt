Basic Info
==========

The DHT used is Kademlia.

The DHT commands are sent to the same port as the TCP listener. All messages are
kept <= 508 bytes to insure no message gets truncated.

We assume a message has been lost if we don't receive a reply within 60 seconds.

All request messages include 8 random bytes which must be echo'd back in the
response. This is to protect against address forgery. The Kademlia spec calls
for 20 bytes but that is excessive.


Concurrency
===========

In the kademlia paper the number of concurrent requests on the wire is referred
to as alpha. This can be anything, but a alpha of 3 is recommended in the
Kademlia paper.


Messages
========

---
name: ping
desc: Check if a host is up and/or get ID.
	+---+---+---+---+
	| C |     R     |
	+---+---+---+---+
	  0   1  ...  8
C = command (base10: 0), R = random bytes
          
expected response: pong

note: We do not send our ID in this message because we don't want the remote
host to be able to know it trivially. This mitigates Sybil attacks.
---

---
name: pong
desc: Sent in response to ping.
	+---+---+---+---+---+---+---+
	| C |     R     |     S     |
	+---+---+---+---+---+---+---+
	  0   1  ...  8   9  ... 28
C = command (base10: 1), R = echo of random bytes, S = ID of sender
---

---
name: find_node
desc: Request for closer nodes.
	+---+---+---+---+---+---+---+
	| C |     R     |     N     |
	+---+---+---+---+---+---+---+
	  0   1  ...  8   9  ... 28
C = command (base10: 2), R = random bytes, N = ID to find

expected response: node_list
---

---
name: node_list
desc: A list of nodes which are closer. This list will contain only one element
if the node is found.
	+---+---+---+---+---+---+   +---+---+---+   +---+---+---+
	| C |     R     | I | J | + |     K     | + |     L     |
	+---+---+---+---+---+---+   +---+---+---+   +---+---+---+
	  0   1  ...  8  11  12      13  ...  x      x+1 ...  y
C = command (base10: 3), R = echo of random bytes, I = IPv4 address count,
J = IPv6 address count, K = IPv4 address list, L = IPv6 address list

note: The counts indicate how many addresses will be in the address lists.
note: The total length of this message will not exceed 508 bytes. The maximum
      number of list elements in 27 to keep the message under 508 bytes.
note: Multiple node_lists may be sent in response to one request.

A K list element:
	+---+---+---+---+---+---+---+---+
	|    IP     |   P   |     N     |
	+---+---+---+---+---+---+---+---+
	  0  ...  3   4   5   6  ... 25
IP = IPv4 address, P = port, N = ID

A L list element:
	+---+---+---+---+---+---+---+---+
	|    IP     |   P   |     N     |
	+---+---+---+---+---+---+---+---+
	  0  ...  15  16  17  18 ... 37
IP = IPv6 address, P = port, N = ID

note: The lists are ordered from closest to farthest.
---

---
name: store
desc: Store a mapping from a ID to a hash.
	+---+---+---+---+---+---+---+
	| C |     S     |     F     |
	+---+---+---+---+---+---+---+
	  0   1  ... 20  21  ... 40
C = command (base10: 4), S = ID, F = hash
---

---
name: find_value
desc: Request a list of node which have the specified hash.
	+---+---+---+---+---+---+---+---+---+---+
	| C |     R     |     S     |     F     |
	+---+---+---+---+---+---+---+---+---+---+
	  0   1  ...  8   9 ...  28  29  ...  48
C = command (base10: 5), S = ID, F = hash

expected response: node_list or value_list
---

---
name: value_list
desc: A list of nodes.
	+---+---+---+---+---+---+---+
	| C |     R     |     K     |
	+---+---+---+---+---+---+---+
	  0   1  ...  x  x+1 ...  y
C = command (base10: 6), R = echo of random bytes, K = ID list

A K list element:
	+---+---+---+
	|     N     |
	+---+---+---+
	  0  ...  19
N = ID that has file

note: Multiple value_lists may be sent in response to one request.
---

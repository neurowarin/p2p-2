Basic Info
==========

The DHT used is Kademlia.

The DHT commands are sent to the same port as the TCP listener. All messages are
kept to less than 508 bytes to insure none get truncated.

We assume a message has been lost if we don't receive a reply within 32 seconds.

All request messages include 8 random bytes which must be echo'd back in the
response. This is to protect against address forgery. The Kademlia spec calls
for 20bytes but that is excessive.


Concurrency
===========

We do not pipeline. If a request hasn't gotten a response we don't send
additional requests to a host.

In the kademlia paper the number of concurrent requests on the wire is referred
to as alpha. This can be anything, but a alpha of 3 is recommended in the
Kademlia paper.


Messages
========

---
name: ping
desc: Used to check if a host is up.
	+---+---+---+---+---+---+---+
	| C |     R     |     S     |
	+---+---+---+---+---+---+---+
	  0   1  ...  8   9 ...  29
C = command (base10: 0), R = random bytes, S = node ID of sender

expected response: pong
---

---
name: pong
desc: Sent in response to ping.
	+---+---+---+---+---+---+---+
	| C |     R     |     S     |
	+---+---+---+---+---+---+---+
	  0   1  ...  8   9 ...  29
C = command (base10: 1), R = echo of random bytes, S = node ID of sender
---

---
name: find_node
desc: Request for closer nodes.
	+---+---+---+---+---+---+---+
	| C |     R     |     N     |
	+---+---+---+---+---+---+---+
	  0   1  ...  8   9 ...  29
C = command (base10: 2), R = random bytes, N = node ID to find

expected response: host_list or node_info
---

---
name: node_list
desc: A list of nodes which are closer.
	+---+---+---+---+---+---+   +---+---+---+   +---+---+---+
	| C |     R     | I | J | + |     K     | + |     L     |
	+---+---+---+---+---+---+   +---+---+---+   +---+---+---+
	  0   1  ...  8  11  12      13  ...  x      x+1 ...  y
C = command (base10: 3), R = echo of random bytes, I = IPv4 address count,
J = IPv6 address count, K = IPv4 address list, L = IPv6 address list

note: The counts indicate how many addresses will be in the address lists.
note: The total length of this message will not exceed 508 bytes.

A K list element:
	+---+---+---+---+---+
	|    IP     | port  |
	+---+---+---+---+---+
	  0  ...  3   4   5

A L list element:
	+---+---+---+---+---+
	|    IP     | port  |
	+---+---+---+---+---+
	  0  ...  15  16  17

note: The lists are ordered from closest to farthest.
---

---
name: node
desc: IP address and port of node. May be IPv4 or IPv6 address.

IPv4
	+---+---+---+---+---+---+
	| C |    IP     | port  |
	+---+---+---+---+---+---+
	  0   1  ...  4   5   6

IPv6
	+---+---+---+---+---+---+
	| C |    IP     | port  |
	+---+---+---+---+---+---+
	  0   1  ...  16  17  18
C = command (base10: 4)
---

---
name: store
desc: Store a mapping from a file hash to a node ID.
	+---+---+---+---+---+---+---+
	| C |     S     |     F     |
	+---+---+---+---+---+---+---+
	  0   1  ...  20  21 ...  40
C = command (base10: 4), S = node ID of sender, N = file hash
---

---
name: find_value
desc: Request a list of node IDs which have the specified file.
	+---+---+---+---+---+---+---+
	| C |     S     |     F     |
	+---+---+---+---+---+---+---+
	  0   1  ...  20  21 ...  40
C = command (base10: 5), S = node ID of sender, N = file hash

expected response: node_list or value
---

---
name: value
desc: A list of nodes.
	+---+---+---+---+
	| C |     K     |
	+---+---+---+---+
	  0   1  ...  20
C = command (base10: 6), K = value

note: The node count indicates how many nodes are in the list.
---
